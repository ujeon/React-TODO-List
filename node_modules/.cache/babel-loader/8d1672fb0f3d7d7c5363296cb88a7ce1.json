{"ast":null,"code":"var _jsxFileName = \"/Users/ujeon/Dropbox/coding/codestates/immersive/im14-2019-08-react-todo-list/todolist/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Todos from \"../src/Todos/Todos\";\nimport Lists from \"../src/Lists/Lists\";\nimport { debounce } from \"lodash\";\nconsole.log(debounce);\n/*******DATA SAMPLE ******/\n// {\n//   id: uniqId(),\n//   title: \"리스트 01\",\n//   todos: [\n//     {\n//       id: uniqId(),\n//       todo: \"투두 리스트 만들기\",\n//       done: false\n//     }\n//   ]\n// }\n\n/*************************/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentList = list => {\n      this.setState({\n        currentList: list\n      });\n    };\n\n    this.pushNewToLists = list => {\n      const temp = this.state.lists.slice();\n      temp.push(list);\n      this.setState({\n        lists: temp\n      });\n    };\n\n    this.createNewTodo = (id, todo) => {\n      const temp = {\n        id: id,\n        todo: todo,\n        done: false\n      };\n      this.unshiftTodoToList(temp);\n    };\n\n    this.unshiftTodoToList = todo => {\n      if (this.state.currentList) {\n        let copyList = this.state.currentList;\n        copyList.todos.unshift(todo);\n        this.listUpdate(copyList);\n        this.setDisplayList();\n      }\n    };\n\n    this.listUpdate = target => {\n      let copyLists = this.state.lists.slice();\n\n      for (let i = 0; i < copyLists.length; i++) {\n        if (copyLists[i].id === target.id) {\n          copyLists[i] = target;\n        }\n      }\n\n      this.setState({\n        lists: copyLists\n      });\n    };\n\n    this.setDisplayList = () => {\n      let target = this.state.currentList;\n      this.setState({\n        listForDisplay: target\n      });\n    };\n\n    this.deleteList = id => {\n      for (let i = 0; i < this.state.lists.length; i++) {\n        if (this.state.lists[i].id === id) {\n          this.state.lists.splice(i, 1);\n        }\n      }\n    };\n\n    this.toggleDone = target => {\n      target.done === false ? target.done = true : target.done = false;\n      console.log(target);\n      this.updateTodo(target, target.id);\n    };\n\n    this.updateTodo = (target, id) => {\n      let listCopy = this.state.currentList.todos.slice();\n\n      for (let i = 0; i < listCopy.length; i++) {\n        if (listCopy[i].id === id) {\n          listCopy[i] = target;\n        }\n      }\n\n      this.setDisplayList();\n      this.listUpdate(listCopy);\n    };\n\n    this.deleteTodo = id => {\n      for (let i = 0; i < this.state.currentList.todos.length; i++) {\n        if (this.state.currentList.todos[i].id === id) {\n          this.state.currentList.todos.splice(i, 1);\n        }\n\n        this.setDisplayList();\n        this.listUpdate(this.state.currentList);\n      }\n    };\n\n    this.setInputEmpty = () => {\n      this.setState({\n        currentTodoValue: \"\"\n      });\n    };\n\n    this.setCurrentListId = id => {\n      this.setState({\n        currentListId: id\n      });\n    };\n\n    this.state = {\n      lists: [],\n      currentList: undefined,\n      listForDisplay: undefined,\n      currentTodoValue: \"\",\n      currentListId: \"\"\n    };\n    this.createNewList = this.createNewList.bind(this);\n    this.filterList = this.filterList.bind(this);\n  } //NOTE 새로운 리스트를 만들고, 만든리스트를 현재 리스트로 설정\n\n\n  async createNewList(id, title) {\n    const temp = {\n      id: id,\n      title: title,\n      todos: []\n    };\n    await this.setCurrentList(temp);\n    this.setCurrentListId(id);\n    this.pushNewToLists(temp);\n    this.setDisplayList();\n  } //NOTE 현재리스트를 설정\n\n\n  //NOTE 투두 값 변경\n  changeTodoValue(value) {\n    this.setState({\n      currentTodoValue: value\n    });\n  } //NOTE 새로운 투두 만들기\n\n\n  //NOTE 리스트를 클릭하면, 해당 리스트를 표시\n  async filterList(id) {\n    let list;\n    this.state.lists.forEach(el => {\n      if (el.id === id) list = el;\n    });\n    await this.setCurrentList(list);\n    this.setDisplayList();\n  } //NOTE 리스트 삭제\n\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"TODOLIST\"), React.createElement(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"section-lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Lists, {\n      lists: this.state.lists,\n      currentList: this.state.currentList,\n      createNewList: this.createNewList,\n      filterList: this.filterList,\n      deleteList: this.deleteList,\n      todoValue: this.state.currentTodoValue,\n      setCurrentListId: this.setCurrentListId,\n      currentListId: this.state.currentListId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"section-todos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Todos, {\n      currentList: this.state.currentList,\n      todoValue: this.state.currentTodoValue,\n      createNewTodo: this.createNewTodo,\n      changeTodoValue: this.changeTodoValue,\n      listForDisplay: this.state.listForDisplay,\n      toggleDone: this.toggleDone,\n      deleteTodo: this.deleteTodo,\n      setInputEmpty: this.setInputEmpty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ujeon/Dropbox/coding/codestates/immersive/im14-2019-08-react-todo-list/todolist/src/App.js"],"names":["React","Todos","Lists","debounce","console","log","App","Component","constructor","props","setCurrentList","list","setState","currentList","pushNewToLists","temp","state","lists","slice","push","createNewTodo","id","todo","done","unshiftTodoToList","copyList","todos","unshift","listUpdate","setDisplayList","target","copyLists","i","length","listForDisplay","deleteList","splice","toggleDone","updateTodo","listCopy","deleteTodo","setInputEmpty","currentTodoValue","setCurrentListId","currentListId","undefined","createNewList","bind","filterList","title","changeTodoValue","value","forEach","el","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAASC,QAAT,QAAyB,QAAzB;AACAC,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,MAAMG,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA+BnBC,cA/BmB,GA+BFC,IAAI,IAAI;AACvB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEF;AAAf,OAAd;AACD,KAjCkB;;AAAA,SAoCnBG,cApCmB,GAoCFH,IAAI,IAAI;AACvB,YAAMI,IAAI,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAAjB,EAAb;AACAH,MAAAA,IAAI,CAACI,IAAL,CAAUR,IAAV;AAEA,WAAKC,QAAL,CAAc;AAAEK,QAAAA,KAAK,EAAEF;AAAT,OAAd;AACD,KAzCkB;;AAAA,SAiDnBK,aAjDmB,GAiDH,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC5B,YAAMP,IAAI,GAAG;AACXM,QAAAA,EAAE,EAAEA,EADO;AAEXC,QAAAA,IAAI,EAAEA,IAFK;AAGXC,QAAAA,IAAI,EAAE;AAHK,OAAb;AAKA,WAAKC,iBAAL,CAAuBT,IAAvB;AACD,KAxDkB;;AAAA,SA2DnBS,iBA3DmB,GA2DCF,IAAI,IAAI;AAC1B,UAAI,KAAKN,KAAL,CAAWH,WAAf,EAA4B;AAC1B,YAAIY,QAAQ,GAAG,KAAKT,KAAL,CAAWH,WAA1B;AACAY,QAAAA,QAAQ,CAACC,KAAT,CAAeC,OAAf,CAAuBL,IAAvB;AACA,aAAKM,UAAL,CAAgBH,QAAhB;AACA,aAAKI,cAAL;AACD;AACF,KAlEkB;;AAAA,SAqEnBD,UArEmB,GAqENE,MAAM,IAAI;AACrB,UAAIC,SAAS,GAAG,KAAKf,KAAL,CAAWC,KAAX,CAAiBC,KAAjB,EAAhB;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAID,SAAS,CAACC,CAAD,CAAT,CAAaX,EAAb,KAAoBS,MAAM,CAACT,EAA/B,EAAmC;AACjCU,UAAAA,SAAS,CAACC,CAAD,CAAT,GAAeF,MAAf;AACD;AACF;;AACD,WAAKlB,QAAL,CAAc;AAAEK,QAAAA,KAAK,EAAEc;AAAT,OAAd;AACD,KA7EkB;;AAAA,SAgFnBF,cAhFmB,GAgFF,MAAM;AACrB,UAAIC,MAAM,GAAG,KAAKd,KAAL,CAAWH,WAAxB;AACA,WAAKD,QAAL,CAAc;AAAEsB,QAAAA,cAAc,EAAEJ;AAAlB,OAAd;AACD,KAnFkB;;AAAA,SAiGnBK,UAjGmB,GAiGNd,EAAE,IAAI;AACjB,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,KAAL,CAAWC,KAAX,CAAiBgB,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,YAAI,KAAKhB,KAAL,CAAWC,KAAX,CAAiBe,CAAjB,EAAoBX,EAApB,KAA2BA,EAA/B,EAAmC;AACjC,eAAKL,KAAL,CAAWC,KAAX,CAAiBmB,MAAjB,CAAwBJ,CAAxB,EAA2B,CAA3B;AACD;AACF;AACF,KAvGkB;;AAAA,SA0GnBK,UA1GmB,GA0GNP,MAAM,IAAI;AACrBA,MAAAA,MAAM,CAACP,IAAP,KAAgB,KAAhB,GAAyBO,MAAM,CAACP,IAAP,GAAc,IAAvC,GAAgDO,MAAM,CAACP,IAAP,GAAc,KAA9D;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAYyB,MAAZ;AACA,WAAKQ,UAAL,CAAgBR,MAAhB,EAAwBA,MAAM,CAACT,EAA/B;AACD,KA9GkB;;AAAA,SAiHnBiB,UAjHmB,GAiHN,CAACR,MAAD,EAAST,EAAT,KAAgB;AAC3B,UAAIkB,QAAQ,GAAG,KAAKvB,KAAL,CAAWH,WAAX,CAAuBa,KAAvB,CAA6BR,KAA7B,EAAf;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,QAAQ,CAACN,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAIO,QAAQ,CAACP,CAAD,CAAR,CAAYX,EAAZ,KAAmBA,EAAvB,EAA2B;AACzBkB,UAAAA,QAAQ,CAACP,CAAD,CAAR,GAAcF,MAAd;AACD;AACF;;AACD,WAAKD,cAAL;AACA,WAAKD,UAAL,CAAgBW,QAAhB;AACD,KA1HkB;;AAAA,SA6HnBC,UA7HmB,GA6HNnB,EAAE,IAAI;AACjB,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhB,KAAL,CAAWH,WAAX,CAAuBa,KAAvB,CAA6BO,MAAjD,EAAyDD,CAAC,EAA1D,EAA8D;AAC5D,YAAI,KAAKhB,KAAL,CAAWH,WAAX,CAAuBa,KAAvB,CAA6BM,CAA7B,EAAgCX,EAAhC,KAAuCA,EAA3C,EAA+C;AAC7C,eAAKL,KAAL,CAAWH,WAAX,CAAuBa,KAAvB,CAA6BU,MAA7B,CAAoCJ,CAApC,EAAuC,CAAvC;AACD;;AACD,aAAKH,cAAL;AACA,aAAKD,UAAL,CAAgB,KAAKZ,KAAL,CAAWH,WAA3B;AACD;AACF,KArIkB;;AAAA,SAwInB4B,aAxImB,GAwIH,MAAM;AACpB,WAAK7B,QAAL,CAAc;AAAE8B,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACD,KA1IkB;;AAAA,SA6InBC,gBA7ImB,GA6IAtB,EAAE,IAAI;AACvB,WAAKT,QAAL,CAAc;AAAEgC,QAAAA,aAAa,EAAEvB;AAAjB,OAAd;AACD,KA/IkB;;AAGjB,SAAKL,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXJ,MAAAA,WAAW,EAAEgC,SAFF;AAGXX,MAAAA,cAAc,EAAEW,SAHL;AAIXH,MAAAA,gBAAgB,EAAE,EAJP;AAKXE,MAAAA,aAAa,EAAE;AALJ,KAAb;AAQA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACD,GAd+B,CAgBhC;;;AACA,QAAMD,aAAN,CAAoBzB,EAApB,EAAwB4B,KAAxB,EAA+B;AAC7B,UAAMlC,IAAI,GAAG;AACXM,MAAAA,EAAE,EAAEA,EADO;AAEX4B,MAAAA,KAAK,EAAEA,KAFI;AAGXvB,MAAAA,KAAK,EAAE;AAHI,KAAb;AAMA,UAAM,KAAKhB,cAAL,CAAoBK,IAApB,CAAN;AACA,SAAK4B,gBAAL,CAAsBtB,EAAtB;AACA,SAAKP,cAAL,CAAoBC,IAApB;AAEA,SAAKc,cAAL;AACD,GA7B+B,CA+BhC;;;AAaA;AACAqB,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrB,SAAKvC,QAAL,CAAc;AAAE8B,MAAAA,gBAAgB,EAAES;AAApB,KAAd;AACD,GA/C+B,CAiDhC;;;AAqCA;AACA,QAAMH,UAAN,CAAiB3B,EAAjB,EAAqB;AACnB,QAAIV,IAAJ;AACA,SAAKK,KAAL,CAAWC,KAAX,CAAiBmC,OAAjB,CAAyBC,EAAE,IAAI;AAC7B,UAAIA,EAAE,CAAChC,EAAH,KAAUA,EAAd,EAAkBV,IAAI,GAAG0C,EAAP;AACnB,KAFD;AAIA,UAAM,KAAK3C,cAAL,CAAoBC,IAApB,CAAN;AACA,SAAKkB,cAAL;AACD,GA/F+B,CAiGhC;;;AAiDAyB,EAAAA,MAAM,GAAG;AACPlD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKW,KAAjB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE,KAAKA,KAAL,CAAWC,KADpB;AAEE,MAAA,WAAW,EAAE,KAAKD,KAAL,CAAWH,WAF1B;AAGE,MAAA,aAAa,EAAE,KAAKiC,aAHtB;AAIE,MAAA,UAAU,EAAE,KAAKE,UAJnB;AAKE,MAAA,UAAU,EAAE,KAAKb,UALnB;AAME,MAAA,SAAS,EAAE,KAAKnB,KAAL,CAAW0B,gBANxB;AAOE,MAAA,gBAAgB,EAAE,KAAKC,gBAPzB;AAQE,MAAA,aAAa,EAAE,KAAK3B,KAAL,CAAW4B,aAR5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAaE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE,KAAK5B,KAAL,CAAWH,WAD1B;AAEE,MAAA,SAAS,EAAE,KAAKG,KAAL,CAAW0B,gBAFxB;AAGE,MAAA,aAAa,EAAE,KAAKtB,aAHtB;AAIE,MAAA,eAAe,EAAE,KAAK8B,eAJxB;AAKE,MAAA,cAAc,EAAE,KAAKlC,KAAL,CAAWkB,cAL7B;AAME,MAAA,UAAU,EAAE,KAAKG,UANnB;AAOE,MAAA,UAAU,EAAE,KAAKG,UAPnB;AAQE,MAAA,aAAa,EAAE,KAAKC,aARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAbF,CAFF,CADF;AA+BD;;AAnL+B;;AAsLlC,eAAenC,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport Todos from \"../src/Todos/Todos\";\nimport Lists from \"../src/Lists/Lists\";\n\nimport { debounce } from \"lodash\";\nconsole.log(debounce);\n\n/*******DATA SAMPLE ******/\n// {\n//   id: uniqId(),\n//   title: \"리스트 01\",\n//   todos: [\n//     {\n//       id: uniqId(),\n//       todo: \"투두 리스트 만들기\",\n//       done: false\n//     }\n//   ]\n// }\n/*************************/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lists: [],\n      currentList: undefined,\n      listForDisplay: undefined,\n      currentTodoValue: \"\",\n      currentListId: \"\"\n    };\n\n    this.createNewList = this.createNewList.bind(this);\n    this.filterList = this.filterList.bind(this);\n  }\n\n  //NOTE 새로운 리스트를 만들고, 만든리스트를 현재 리스트로 설정\n  async createNewList(id, title) {\n    const temp = {\n      id: id,\n      title: title,\n      todos: []\n    };\n\n    await this.setCurrentList(temp);\n    this.setCurrentListId(id);\n    this.pushNewToLists(temp);\n\n    this.setDisplayList();\n  }\n\n  //NOTE 현재리스트를 설정\n  setCurrentList = list => {\n    this.setState({ currentList: list });\n  };\n\n  //NOTE 리스트 목록에 새로운 리스트 삽입\n  pushNewToLists = list => {\n    const temp = this.state.lists.slice();\n    temp.push(list);\n\n    this.setState({ lists: temp });\n  };\n\n  //NOTE 투두 값 변경\n  changeTodoValue(value) {\n    this.setState({ currentTodoValue: value });\n  }\n\n  //NOTE 새로운 투두 만들기\n  createNewTodo = (id, todo) => {\n    const temp = {\n      id: id,\n      todo: todo,\n      done: false\n    };\n    this.unshiftTodoToList(temp);\n  };\n\n  //NOTE 현재 리스트에 할일(todos) 삽입\n  unshiftTodoToList = todo => {\n    if (this.state.currentList) {\n      let copyList = this.state.currentList;\n      copyList.todos.unshift(todo);\n      this.listUpdate(copyList);\n      this.setDisplayList();\n    }\n  };\n\n  //NOTE 업데이트 된 리스트를 리스트에서 업데이트\n  listUpdate = target => {\n    let copyLists = this.state.lists.slice();\n    for (let i = 0; i < copyLists.length; i++) {\n      if (copyLists[i].id === target.id) {\n        copyLists[i] = target;\n      }\n    }\n    this.setState({ lists: copyLists });\n  };\n\n  //NOTE 디스플레이 될 리스트를 현재 리스트로 설정\n  setDisplayList = () => {\n    let target = this.state.currentList;\n    this.setState({ listForDisplay: target });\n  };\n\n  //NOTE 리스트를 클릭하면, 해당 리스트를 표시\n  async filterList(id) {\n    let list;\n    this.state.lists.forEach(el => {\n      if (el.id === id) list = el;\n    });\n\n    await this.setCurrentList(list);\n    this.setDisplayList();\n  }\n\n  //NOTE 리스트 삭제\n  deleteList = id => {\n    for (let i = 0; i < this.state.lists.length; i++) {\n      if (this.state.lists[i].id === id) {\n        this.state.lists.splice(i, 1);\n      }\n    }\n  };\n\n  //NOTE 투두에 done 변경\n  toggleDone = target => {\n    target.done === false ? (target.done = true) : (target.done = false);\n    console.log(target);\n    this.updateTodo(target, target.id);\n  };\n\n  //NOTE 투두에 변경이 있으면 현재 리스트에 변경사항 저장\n  updateTodo = (target, id) => {\n    let listCopy = this.state.currentList.todos.slice();\n    for (let i = 0; i < listCopy.length; i++) {\n      if (listCopy[i].id === id) {\n        listCopy[i] = target;\n      }\n    }\n    this.setDisplayList();\n    this.listUpdate(listCopy);\n  };\n\n  //NOTE 투두 삭제\n  deleteTodo = id => {\n    for (let i = 0; i < this.state.currentList.todos.length; i++) {\n      if (this.state.currentList.todos[i].id === id) {\n        this.state.currentList.todos.splice(i, 1);\n      }\n      this.setDisplayList();\n      this.listUpdate(this.state.currentList);\n    }\n  };\n\n  //TODO currentTodoValue를 ''으로 변경\n  setInputEmpty = () => {\n    this.setState({ currentTodoValue: \"\" });\n  };\n\n  //TODO 현재 선택된 리스트로 id 변경\n  setCurrentListId = id => {\n    this.setState({ currentListId: id });\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"main\">\n        <div className=\"app-title\">TODOLIST</div>\n        <div className=\"section\">\n          <div className=\"section-lists\">\n            <Lists\n              lists={this.state.lists}\n              currentList={this.state.currentList}\n              createNewList={this.createNewList}\n              filterList={this.filterList}\n              deleteList={this.deleteList}\n              todoValue={this.state.currentTodoValue}\n              setCurrentListId={this.setCurrentListId}\n              currentListId={this.state.currentListId}\n            />\n          </div>\n          <div className=\"section-todos\">\n            <Todos\n              currentList={this.state.currentList}\n              todoValue={this.state.currentTodoValue}\n              createNewTodo={this.createNewTodo}\n              changeTodoValue={this.changeTodoValue}\n              listForDisplay={this.state.listForDisplay}\n              toggleDone={this.toggleDone}\n              deleteTodo={this.deleteTodo}\n              setInputEmpty={this.setInputEmpty}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}