{"ast":null,"code":"var _jsxFileName = \"/Users/ujeon/Dropbox/coding/codestates/immersive/im14-2019-08-react-todo-list/todolist/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Todos from \"../src/Todos/Todos\";\nimport Lists from \"../src/Lists/Lists\";\n\nconst uniqId = require(\"uniqid\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentList = list => {\n      this.setState({\n        currentList: list\n      });\n    };\n\n    this.pushNewToLists = list => {\n      const temp = this.state.lists.slice();\n      temp.push(list);\n      this.setState({\n        lists: temp\n      });\n    };\n\n    this.changeTodoValue = value => {\n      this.setState({\n        currentTodoValue: value\n      });\n    };\n\n    this.createNewTodo = (id, todo) => {\n      const temp = {\n        id: id,\n        todo: todo,\n        done: false\n      }; // console.log(temp);\n\n      this.unshiftTodoToList(temp); // console.log(this.state.currentList);\n    };\n\n    this.unshiftTodoToList = todo => {\n      this.state.currentList.todos.unshift(todo);\n      this.listUpdate(this.state.currentList);\n      this.setDisplayList();\n    };\n\n    this.listUpdate = target => {\n      let copyLists = this.state.lists.slice();\n\n      for (let i = 0; i < copyLists.length; i++) {\n        if (copyLists[i].id === target.id) {\n          copyLists[i] = target;\n        }\n      }\n\n      this.setState({\n        lists: copyLists\n      }); // console.log(copyLists);\n    };\n\n    this.setDisplayList = () => {\n      let target = this.state.currentList;\n      this.setState({\n        listForDisplay: target\n      });\n    };\n\n    this.deleteList = id => {\n      for (let i = 0; i < this.state.lists.length; i++) {\n        if (this.state.lists[i].id === id) {\n          this.state.lists.splice(i, 1);\n        }\n      }\n\n      console.log(this.state);\n    };\n\n    this.toggleDone = target => {\n      target.done === false ? target.done = true : target.done = false;\n      console.log(target);\n      this.updateTodo(target, target.id);\n    };\n\n    this.updateTodo = (target, id) => {\n      let listCopy = this.state.currentList.todos.slice();\n      console.log(listCopy);\n\n      for (let i = 0; i < listCopy.length; i++) {\n        if (listCopy[i].id === id) {\n          listCopy[i] = target;\n        }\n      }\n\n      this.setDisplayList();\n      this.listUpdate(listCopy);\n    };\n\n    this.deleteTodo = id => {\n      for (let i = 0; i < this.state.currentList.todos.length; i++) {\n        if (this.state.currentList.todos[i].id === id) {\n          this.state.currentList.todos.splice(i, 1);\n        }\n\n        this.setDisplayList();\n        this.listUpdate(this.state.currentList);\n      }\n    };\n\n    this.state = {\n      lists: [{\n        id: uniqId(),\n        title: \"리스트 01\",\n        todos: [{\n          id: uniqId(),\n          todo: \"청소하기\",\n          done: false\n        }]\n      }],\n      currentList: {\n        id: uniqId(),\n        title: \"첫번째 리스트\",\n        todos: [{\n          id: uniqId(),\n          todo: \"청소하기\",\n          done: false\n        }]\n      },\n      listForDisplay: {\n        id: uniqId(),\n        title: \"첫번째 리스트\",\n        todos: [{\n          id: uniqId(),\n          todo: \"청소하기\",\n          done: false\n        }]\n      },\n      currentTodoValue: \"\"\n    };\n    this.createNewList = this.createNewList.bind(this);\n    this.filterList = this.filterList.bind(this);\n  } //REVIEW 새로운 리스트를 만들고, 만든리스트를 현재 리스트로 설정\n\n\n  async createNewList(id, title) {\n    const temp = {\n      id: id,\n      title: title,\n      todos: []\n    };\n    await this.setCurrentList(temp);\n    this.pushNewToLists(temp);\n    this.setDisplayList(); // setTimeout(\n    //   function() {\n    //     console.log(this.state);\n    //   }.bind(this),\n    //   1500\n    // );\n  } //REVIEW 현재리스트를 설정\n\n\n  //TODO 리스트를 클릭하면, 해당 리스트를 표시\n  async filterList(id) {\n    let list;\n    this.state.lists.forEach(el => {\n      if (el.id === id) list = el;\n    });\n    await this.setCurrentList(list);\n    this.setDisplayList();\n  } //TODO 리스트 삭제\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"TODOLIST\"), React.createElement(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"section-lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Lists, {\n      lists: this.state.lists,\n      currentList: this.state.currentList,\n      createNewList: this.createNewList,\n      filterList: this.filterList,\n      deleteList: this.deleteList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"section-todos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(Todos, {\n      currentList: this.state.currentList,\n      todoValue: this.state.currentTodoValue,\n      createNewTodo: this.createNewTodo,\n      changeTodoValue: this.changeTodoValue,\n      listForDisplay: this.state.listForDisplay,\n      toggleDone: this.toggleDone,\n      deleteTodo: this.deleteTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ujeon/Dropbox/coding/codestates/immersive/im14-2019-08-react-todo-list/todolist/src/App.js"],"names":["React","Todos","Lists","uniqId","require","App","Component","constructor","props","setCurrentList","list","setState","currentList","pushNewToLists","temp","state","lists","slice","push","changeTodoValue","value","currentTodoValue","createNewTodo","id","todo","done","unshiftTodoToList","todos","unshift","listUpdate","setDisplayList","target","copyLists","i","length","listForDisplay","deleteList","splice","console","log","toggleDone","updateTodo","listCopy","deleteTodo","title","createNewList","bind","filterList","forEach","el","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkEnBC,cAlEmB,GAkEFC,IAAI,IAAI;AACvB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEF;AAAf,OAAd;AACD,KApEkB;;AAAA,SAuEnBG,cAvEmB,GAuEFH,IAAI,IAAI;AACvB,YAAMI,IAAI,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAAjB,EAAb;AACAH,MAAAA,IAAI,CAACI,IAAL,CAAUR,IAAV;AAEA,WAAKC,QAAL,CAAc;AAAEK,QAAAA,KAAK,EAAEF;AAAT,OAAd;AACD,KA5EkB;;AAAA,SA+EnBK,eA/EmB,GA+EDC,KAAK,IAAI;AACzB,WAAKT,QAAL,CAAc;AAAEU,QAAAA,gBAAgB,EAAED;AAApB,OAAd;AACD,KAjFkB;;AAAA,SAoFnBE,aApFmB,GAoFH,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC5B,YAAMV,IAAI,GAAG;AACXS,QAAAA,EAAE,EAAEA,EADO;AAEXC,QAAAA,IAAI,EAAEA,IAFK;AAGXC,QAAAA,IAAI,EAAE;AAHK,OAAb,CAD4B,CAM5B;;AACA,WAAKC,iBAAL,CAAuBZ,IAAvB,EAP4B,CAQ5B;AACD,KA7FkB;;AAAA,SAgGnBY,iBAhGmB,GAgGCF,IAAI,IAAI;AAC1B,WAAKT,KAAL,CAAWH,WAAX,CAAuBe,KAAvB,CAA6BC,OAA7B,CAAqCJ,IAArC;AACA,WAAKK,UAAL,CAAgB,KAAKd,KAAL,CAAWH,WAA3B;AACA,WAAKkB,cAAL;AACD,KApGkB;;AAAA,SAuGnBD,UAvGmB,GAuGNE,MAAM,IAAI;AACrB,UAAIC,SAAS,GAAG,KAAKjB,KAAL,CAAWC,KAAX,CAAiBC,KAAjB,EAAhB;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,YAAID,SAAS,CAACC,CAAD,CAAT,CAAaV,EAAb,KAAoBQ,MAAM,CAACR,EAA/B,EAAmC;AACjCS,UAAAA,SAAS,CAACC,CAAD,CAAT,GAAeF,MAAf;AACD;AACF;;AACD,WAAKpB,QAAL,CAAc;AAAEK,QAAAA,KAAK,EAAEgB;AAAT,OAAd,EAPqB,CAQrB;AACD,KAhHkB;;AAAA,SAmHnBF,cAnHmB,GAmHF,MAAM;AACrB,UAAIC,MAAM,GAAG,KAAKhB,KAAL,CAAWH,WAAxB;AACA,WAAKD,QAAL,CAAc;AAAEwB,QAAAA,cAAc,EAAEJ;AAAlB,OAAd;AACD,KAtHkB;;AAAA,SAoInBK,UApImB,GAoINb,EAAE,IAAI;AACjB,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlB,KAAL,CAAWC,KAAX,CAAiBkB,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,YAAI,KAAKlB,KAAL,CAAWC,KAAX,CAAiBiB,CAAjB,EAAoBV,EAApB,KAA2BA,EAA/B,EAAmC;AACjC,eAAKR,KAAL,CAAWC,KAAX,CAAiBqB,MAAjB,CAAwBJ,CAAxB,EAA2B,CAA3B;AACD;AACF;;AAEDK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAjB;AACD,KA5IkB;;AAAA,SA+InByB,UA/ImB,GA+INT,MAAM,IAAI;AACrBA,MAAAA,MAAM,CAACN,IAAP,KAAgB,KAAhB,GAAyBM,MAAM,CAACN,IAAP,GAAc,IAAvC,GAAgDM,MAAM,CAACN,IAAP,GAAc,KAA9D;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACA,WAAKU,UAAL,CAAgBV,MAAhB,EAAwBA,MAAM,CAACR,EAA/B;AACD,KAnJkB;;AAAA,SAsJnBkB,UAtJmB,GAsJN,CAACV,MAAD,EAASR,EAAT,KAAgB;AAC3B,UAAImB,QAAQ,GAAG,KAAK3B,KAAL,CAAWH,WAAX,CAAuBe,KAAvB,CAA6BV,KAA7B,EAAf;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,QAAQ,CAACR,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAIS,QAAQ,CAACT,CAAD,CAAR,CAAYV,EAAZ,KAAmBA,EAAvB,EAA2B;AACzBmB,UAAAA,QAAQ,CAACT,CAAD,CAAR,GAAcF,MAAd;AACD;AACF;;AACD,WAAKD,cAAL;AACA,WAAKD,UAAL,CAAgBa,QAAhB;AACD,KAhKkB;;AAAA,SAmKnBC,UAnKmB,GAmKNpB,EAAE,IAAI;AACjB,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlB,KAAL,CAAWH,WAAX,CAAuBe,KAAvB,CAA6BO,MAAjD,EAAyDD,CAAC,EAA1D,EAA8D;AAC5D,YAAI,KAAKlB,KAAL,CAAWH,WAAX,CAAuBe,KAAvB,CAA6BM,CAA7B,EAAgCV,EAAhC,KAAuCA,EAA3C,EAA+C;AAC7C,eAAKR,KAAL,CAAWH,WAAX,CAAuBe,KAAvB,CAA6BU,MAA7B,CAAoCJ,CAApC,EAAuC,CAAvC;AACD;;AACD,aAAKH,cAAL;AACA,aAAKD,UAAL,CAAgB,KAAKd,KAAL,CAAWH,WAA3B;AACD;AACF,KA3KkB;;AAGjB,SAAKG,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,CACL;AACEO,QAAAA,EAAE,EAAEpB,MAAM,EADZ;AAEEyC,QAAAA,KAAK,EAAE,QAFT;AAGEjB,QAAAA,KAAK,EAAE,CACL;AACEJ,UAAAA,EAAE,EAAEpB,MAAM,EADZ;AAEEqB,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,IAAI,EAAE;AAHR,SADK;AAHT,OADK,CADI;AAcXb,MAAAA,WAAW,EAAE;AACXW,QAAAA,EAAE,EAAEpB,MAAM,EADC;AAEXyC,QAAAA,KAAK,EAAE,SAFI;AAGXjB,QAAAA,KAAK,EAAE,CACL;AACEJ,UAAAA,EAAE,EAAEpB,MAAM,EADZ;AAEEqB,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,IAAI,EAAE;AAHR,SADK;AAHI,OAdF;AAyBXU,MAAAA,cAAc,EAAE;AACdZ,QAAAA,EAAE,EAAEpB,MAAM,EADI;AAEdyC,QAAAA,KAAK,EAAE,SAFO;AAGdjB,QAAAA,KAAK,EAAE,CACL;AACEJ,UAAAA,EAAE,EAAEpB,MAAM,EADZ;AAEEqB,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,IAAI,EAAE;AAHR,SADK;AAHO,OAzBL;AAoCXJ,MAAAA,gBAAgB,EAAE;AApCP,KAAb;AAuCA,SAAKwB,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACD,GA7C+B,CA+ChC;;;AACA,QAAMD,aAAN,CAAoBtB,EAApB,EAAwBqB,KAAxB,EAA+B;AAC7B,UAAM9B,IAAI,GAAG;AACXS,MAAAA,EAAE,EAAEA,EADO;AAEXqB,MAAAA,KAAK,EAAEA,KAFI;AAGXjB,MAAAA,KAAK,EAAE;AAHI,KAAb;AAMA,UAAM,KAAKlB,cAAL,CAAoBK,IAApB,CAAN;AACA,SAAKD,cAAL,CAAoBC,IAApB;AACA,SAAKgB,cAAL,GAT6B,CAU7B;AACA;AACA;AACA;AACA;AACA;AACD,GAhE+B,CAkEhC;;;AAuDA;AACA,QAAMiB,UAAN,CAAiBxB,EAAjB,EAAqB;AACnB,QAAIb,IAAJ;AACA,SAAKK,KAAL,CAAWC,KAAX,CAAiBgC,OAAjB,CAAyBC,EAAE,IAAI;AAC7B,UAAIA,EAAE,CAAC1B,EAAH,KAAUA,EAAd,EAAkBb,IAAI,GAAGuC,EAAP;AACnB,KAFD;AAIA,UAAM,KAAKxC,cAAL,CAAoBC,IAApB,CAAN;AACA,SAAKoB,cAAL;AACD,GAlI+B,CAoIhC;;;AA0CAoB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWC,KADpB;AAEE,MAAA,WAAW,EAAE,KAAKD,KAAL,CAAWH,WAF1B;AAGE,MAAA,aAAa,EAAE,KAAKiC,aAHtB;AAIE,MAAA,UAAU,EAAE,KAAKE,UAJnB;AAKE,MAAA,UAAU,EAAE,KAAKX,UALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAUE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWH,WAD1B;AAEE,MAAA,SAAS,EAAE,KAAKG,KAAL,CAAWM,gBAFxB;AAGE,MAAA,aAAa,EAAE,KAAKC,aAHtB;AAIE,MAAA,eAAe,EAAE,KAAKH,eAJxB;AAKE,MAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWoB,cAL7B;AAME,MAAA,UAAU,EAAE,KAAKK,UANnB;AAOE,MAAA,UAAU,EAAE,KAAKG,UAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CAFF,CADF;AA2BD;;AA1M+B;;AA6MlC,eAAetC,GAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport Todos from \"../src/Todos/Todos\";\nimport Lists from \"../src/Lists/Lists\";\n\nconst uniqId = require(\"uniqid\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lists: [\n        {\n          id: uniqId(),\n          title: \"리스트 01\",\n          todos: [\n            {\n              id: uniqId(),\n              todo: \"청소하기\",\n              done: false\n            }\n          ]\n        }\n      ],\n      currentList: {\n        id: uniqId(),\n        title: \"첫번째 리스트\",\n        todos: [\n          {\n            id: uniqId(),\n            todo: \"청소하기\",\n            done: false\n          }\n        ]\n      },\n      listForDisplay: {\n        id: uniqId(),\n        title: \"첫번째 리스트\",\n        todos: [\n          {\n            id: uniqId(),\n            todo: \"청소하기\",\n            done: false\n          }\n        ]\n      },\n      currentTodoValue: \"\"\n    };\n\n    this.createNewList = this.createNewList.bind(this);\n    this.filterList = this.filterList.bind(this);\n  }\n\n  //REVIEW 새로운 리스트를 만들고, 만든리스트를 현재 리스트로 설정\n  async createNewList(id, title) {\n    const temp = {\n      id: id,\n      title: title,\n      todos: []\n    };\n\n    await this.setCurrentList(temp);\n    this.pushNewToLists(temp);\n    this.setDisplayList();\n    // setTimeout(\n    //   function() {\n    //     console.log(this.state);\n    //   }.bind(this),\n    //   1500\n    // );\n  }\n\n  //REVIEW 현재리스트를 설정\n  setCurrentList = list => {\n    this.setState({ currentList: list });\n  };\n\n  //REVIEW 리스트 목록에 새로운 리스트 삽입\n  pushNewToLists = list => {\n    const temp = this.state.lists.slice();\n    temp.push(list);\n\n    this.setState({ lists: temp });\n  };\n\n  //REVIEW 투두 값 변경\n  changeTodoValue = value => {\n    this.setState({ currentTodoValue: value });\n  };\n\n  //REVIEW 새로운 투두 만들기\n  createNewTodo = (id, todo) => {\n    const temp = {\n      id: id,\n      todo: todo,\n      done: false\n    };\n    // console.log(temp);\n    this.unshiftTodoToList(temp);\n    // console.log(this.state.currentList);\n  };\n\n  //REVIEW 현재 리스트에 할일(todos) 삽입\n  unshiftTodoToList = todo => {\n    this.state.currentList.todos.unshift(todo);\n    this.listUpdate(this.state.currentList);\n    this.setDisplayList();\n  };\n\n  //REVIEW 업데이트 된 리스트를 리스트에서 업데이트\n  listUpdate = target => {\n    let copyLists = this.state.lists.slice();\n    for (let i = 0; i < copyLists.length; i++) {\n      if (copyLists[i].id === target.id) {\n        copyLists[i] = target;\n      }\n    }\n    this.setState({ lists: copyLists });\n    // console.log(copyLists);\n  };\n\n  //REVIEW 디스플레이 될 리스트를 현재 리스트로 설정\n  setDisplayList = () => {\n    let target = this.state.currentList;\n    this.setState({ listForDisplay: target });\n  };\n\n  //TODO 리스트를 클릭하면, 해당 리스트를 표시\n  async filterList(id) {\n    let list;\n    this.state.lists.forEach(el => {\n      if (el.id === id) list = el;\n    });\n\n    await this.setCurrentList(list);\n    this.setDisplayList();\n  }\n\n  //TODO 리스트 삭제\n  deleteList = id => {\n    for (let i = 0; i < this.state.lists.length; i++) {\n      if (this.state.lists[i].id === id) {\n        this.state.lists.splice(i, 1);\n      }\n    }\n\n    console.log(this.state);\n  };\n\n  //TODO 투두에 done 변경\n  toggleDone = target => {\n    target.done === false ? (target.done = true) : (target.done = false);\n    console.log(target);\n    this.updateTodo(target, target.id);\n  };\n\n  //TODO 투두에 변경이 있으면 현재 리스트에 변경사항 저장\n  updateTodo = (target, id) => {\n    let listCopy = this.state.currentList.todos.slice();\n    console.log(listCopy);\n    for (let i = 0; i < listCopy.length; i++) {\n      if (listCopy[i].id === id) {\n        listCopy[i] = target;\n      }\n    }\n    this.setDisplayList();\n    this.listUpdate(listCopy);\n  };\n\n  //TODO 투두 삭제\n  deleteTodo = id => {\n    for (let i = 0; i < this.state.currentList.todos.length; i++) {\n      if (this.state.currentList.todos[i].id === id) {\n        this.state.currentList.todos.splice(i, 1);\n      }\n      this.setDisplayList();\n      this.listUpdate(this.state.currentList);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"app-title\">TODOLIST</div>\n        <div className=\"section\">\n          <div className=\"section-lists\">\n            <Lists\n              lists={this.state.lists}\n              currentList={this.state.currentList}\n              createNewList={this.createNewList}\n              filterList={this.filterList}\n              deleteList={this.deleteList}\n            />\n          </div>\n          <div className=\"section-todos\">\n            <Todos\n              currentList={this.state.currentList}\n              todoValue={this.state.currentTodoValue}\n              createNewTodo={this.createNewTodo}\n              changeTodoValue={this.changeTodoValue}\n              listForDisplay={this.state.listForDisplay}\n              toggleDone={this.toggleDone}\n              deleteTodo={this.deleteTodo}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}