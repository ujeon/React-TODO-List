{"ast":null,"code":"var _jsxFileName = \"/Users/ujeon/Dropbox/coding/codestates/immersive/im14-2019-08-react-todo-list/todolist/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Todos from \"../src/Todos/Todos\";\nimport Lists from \"../src/Lists/Lists\";\n/*******DATA SAMPLE ******/\n// {\n//   id: uniqId(),\n//   title: \"리스트 01\",\n//   todos: [\n//     {\n//       id: uniqId(),\n//       todo: \"투두 리스트 만들기\",\n//       done: false\n//     }\n//   ]\n// }\n\n/*************************/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentList = list => {\n      this.setState({\n        currentList: list\n      });\n    };\n\n    this.pushNewToLists = list => {\n      const temp = this.state.lists.slice();\n      temp.push(list);\n      this.setState({\n        lists: temp\n      });\n    };\n\n    this.changeTodoValue = value => {\n      this.setState({\n        currentTodoValue: value\n      });\n    };\n\n    this.createNewTodo = (id, todo) => {\n      const temp = {\n        id: id,\n        todo: todo,\n        done: false\n      }; // console.log(temp);\n\n      this.unshiftTodoToList(temp); // console.log(this.state.currentList);\n    };\n\n    this.unshiftTodoToList = todo => {\n      if (this.state.currentList) {\n        let copyList = this.state.currentList;\n        copyList.todos.unshift(todo);\n        this.listUpdate(copyList);\n        this.setDisplayList();\n      }\n    };\n\n    this.listUpdate = target => {\n      let copyLists = this.state.lists.slice();\n\n      for (let i = 0; i < copyLists.length; i++) {\n        if (copyLists[i].id === target.id) {\n          copyLists[i] = target;\n        }\n      }\n\n      this.setState({\n        lists: copyLists\n      }); // console.log(copyLists);\n    };\n\n    this.setDisplayList = () => {\n      let target = this.state.currentList;\n      this.setState({\n        listForDisplay: target\n      });\n    };\n\n    this.deleteList = id => {\n      for (let i = 0; i < this.state.lists.length; i++) {\n        if (this.state.lists[i].id === id) {\n          this.state.lists.splice(i, 1);\n        }\n      }\n\n      console.log(this.state);\n    };\n\n    this.toggleDone = target => {\n      target.done === false ? target.done = true : target.done = false;\n      console.log(target);\n      this.updateTodo(target, target.id);\n    };\n\n    this.updateTodo = (target, id) => {\n      let listCopy = this.state.currentList.todos.slice();\n      console.log(listCopy);\n\n      for (let i = 0; i < listCopy.length; i++) {\n        if (listCopy[i].id === id) {\n          listCopy[i] = target;\n        }\n      }\n\n      this.setDisplayList();\n      this.listUpdate(listCopy);\n    };\n\n    this.deleteTodo = id => {\n      for (let i = 0; i < this.state.currentList.todos.length; i++) {\n        if (this.state.currentList.todos[i].id === id) {\n          this.state.currentList.todos.splice(i, 1);\n        }\n\n        this.setDisplayList();\n        this.listUpdate(this.state.currentList);\n      }\n    };\n\n    this.state = {\n      lists: [],\n      currentList: undefined,\n      listForDisplay: undefined,\n      currentTodoValue: \"\"\n    };\n    this.createNewList = this.createNewList.bind(this);\n    this.filterList = this.filterList.bind(this);\n  } //REVIEW 새로운 리스트를 만들고, 만든리스트를 현재 리스트로 설정\n\n\n  async createNewList(id, title) {\n    const temp = {\n      id: id,\n      title: title,\n      todos: []\n    };\n    await this.setCurrentList(temp);\n    this.pushNewToLists(temp);\n    this.setDisplayList(); // setTimeout(\n    //   function() {\n    //     console.log(this.state);\n    //   }.bind(this),\n    //   1500\n    // );\n  } //REVIEW 현재리스트를 설정\n\n\n  //TODO 리스트를 클릭하면, 해당 리스트를 표시\n  async filterList(id) {\n    let list;\n    this.state.lists.forEach(el => {\n      if (el.id === id) list = el;\n    });\n    await this.setCurrentList(list);\n    this.setDisplayList();\n  } //TODO 리스트 삭제\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"app-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"TODOLIST\"), React.createElement(\"div\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"section-lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Lists, {\n      lists: this.state.lists,\n      currentList: this.state.currentList,\n      createNewList: this.createNewList,\n      filterList: this.filterList,\n      deleteList: this.deleteList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"section-todos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Todos, {\n      currentList: this.state.currentList,\n      todoValue: this.state.currentTodoValue,\n      createNewTodo: this.createNewTodo,\n      changeTodoValue: this.changeTodoValue,\n      listForDisplay: this.state.listForDisplay,\n      toggleDone: this.toggleDone,\n      deleteTodo: this.deleteTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ujeon/Dropbox/coding/codestates/immersive/im14-2019-08-react-todo-list/todolist/src/App.js"],"names":["React","Todos","Lists","App","Component","constructor","props","setCurrentList","list","setState","currentList","pushNewToLists","temp","state","lists","slice","push","changeTodoValue","value","currentTodoValue","createNewTodo","id","todo","done","unshiftTodoToList","copyList","todos","unshift","listUpdate","setDisplayList","target","copyLists","i","length","listForDisplay","deleteList","splice","console","log","toggleDone","updateTodo","listCopy","deleteTodo","undefined","createNewList","bind","filterList","title","forEach","el","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport Todos from \"../src/Todos/Todos\";\nimport Lists from \"../src/Lists/Lists\";\n\n/*******DATA SAMPLE ******/\n// {\n//   id: uniqId(),\n//   title: \"리스트 01\",\n//   todos: [\n//     {\n//       id: uniqId(),\n//       todo: \"투두 리스트 만들기\",\n//       done: false\n//     }\n//   ]\n// }\n/*************************/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lists: [],\n      currentList: undefined,\n      listForDisplay: undefined,\n      currentTodoValue: \"\"\n    };\n\n    this.createNewList = this.createNewList.bind(this);\n    this.filterList = this.filterList.bind(this);\n  }\n\n  //REVIEW 새로운 리스트를 만들고, 만든리스트를 현재 리스트로 설정\n  async createNewList(id, title) {\n    const temp = {\n      id: id,\n      title: title,\n      todos: []\n    };\n\n    await this.setCurrentList(temp);\n    this.pushNewToLists(temp);\n    this.setDisplayList();\n    // setTimeout(\n    //   function() {\n    //     console.log(this.state);\n    //   }.bind(this),\n    //   1500\n    // );\n  }\n\n  //REVIEW 현재리스트를 설정\n  setCurrentList = list => {\n    this.setState({ currentList: list });\n  };\n\n  //REVIEW 리스트 목록에 새로운 리스트 삽입\n  pushNewToLists = list => {\n    const temp = this.state.lists.slice();\n    temp.push(list);\n\n    this.setState({ lists: temp });\n  };\n\n  //REVIEW 투두 값 변경\n  changeTodoValue = value => {\n    this.setState({ currentTodoValue: value });\n  };\n\n  //REVIEW 새로운 투두 만들기\n  createNewTodo = (id, todo) => {\n    const temp = {\n      id: id,\n      todo: todo,\n      done: false\n    };\n    // console.log(temp);\n    this.unshiftTodoToList(temp);\n    // console.log(this.state.currentList);\n  };\n\n  //REVIEW 현재 리스트에 할일(todos) 삽입\n  unshiftTodoToList = todo => {\n    if (this.state.currentList) {\n      let copyList = this.state.currentList;\n      copyList.todos.unshift(todo);\n      this.listUpdate(copyList);\n      this.setDisplayList();\n    }\n  };\n\n  //REVIEW 업데이트 된 리스트를 리스트에서 업데이트\n  listUpdate = target => {\n    let copyLists = this.state.lists.slice();\n    for (let i = 0; i < copyLists.length; i++) {\n      if (copyLists[i].id === target.id) {\n        copyLists[i] = target;\n      }\n    }\n    this.setState({ lists: copyLists });\n    // console.log(copyLists);\n  };\n\n  //REVIEW 디스플레이 될 리스트를 현재 리스트로 설정\n  setDisplayList = () => {\n    let target = this.state.currentList;\n    this.setState({ listForDisplay: target });\n  };\n\n  //TODO 리스트를 클릭하면, 해당 리스트를 표시\n  async filterList(id) {\n    let list;\n    this.state.lists.forEach(el => {\n      if (el.id === id) list = el;\n    });\n\n    await this.setCurrentList(list);\n    this.setDisplayList();\n  }\n\n  //TODO 리스트 삭제\n  deleteList = id => {\n    for (let i = 0; i < this.state.lists.length; i++) {\n      if (this.state.lists[i].id === id) {\n        this.state.lists.splice(i, 1);\n      }\n    }\n\n    console.log(this.state);\n  };\n\n  //TODO 투두에 done 변경\n  toggleDone = target => {\n    target.done === false ? (target.done = true) : (target.done = false);\n    console.log(target);\n    this.updateTodo(target, target.id);\n  };\n\n  //TODO 투두에 변경이 있으면 현재 리스트에 변경사항 저장\n  updateTodo = (target, id) => {\n    let listCopy = this.state.currentList.todos.slice();\n    console.log(listCopy);\n    for (let i = 0; i < listCopy.length; i++) {\n      if (listCopy[i].id === id) {\n        listCopy[i] = target;\n      }\n    }\n    this.setDisplayList();\n    this.listUpdate(listCopy);\n  };\n\n  //TODO 투두 삭제\n  deleteTodo = id => {\n    for (let i = 0; i < this.state.currentList.todos.length; i++) {\n      if (this.state.currentList.todos[i].id === id) {\n        this.state.currentList.todos.splice(i, 1);\n      }\n      this.setDisplayList();\n      this.listUpdate(this.state.currentList);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"app-title\">TODOLIST</div>\n        <div className=\"section\">\n          <div className=\"section-lists\">\n            <Lists\n              lists={this.state.lists}\n              currentList={this.state.currentList}\n              createNewList={this.createNewList}\n              filterList={this.filterList}\n              deleteList={this.deleteList}\n            />\n          </div>\n          <div className=\"section-todos\">\n            <Todos\n              currentList={this.state.currentList}\n              todoValue={this.state.currentTodoValue}\n              createNewTodo={this.createNewTodo}\n              changeTodoValue={this.changeTodoValue}\n              listForDisplay={this.state.listForDisplay}\n              toggleDone={this.toggleDone}\n              deleteTodo={this.deleteTodo}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}